const InsertBuilder = require('../../db/sql-builder').InsertBuilder
const getAnnotatedColumns = require('../../db/sql-builder/annotations')

class CustomUpsertBuilder extends InsertBuilder {
  // REVISIT: We need to copy over the implementation for annotation handling
  build() {
    this._outputObj = {
      sql: ['INSERT', 'INTO'],
      values: []
    }

    this._obj = { INSERT: this._obj.UPSERT, _target: this._obj._target }

    const entityName = this._into()

    this._columnIndexesToDelete = []
    const annotatedColumns = getAnnotatedColumns(entityName, this._csn)
    // hack: treat update annotations as insert because of sql builder impl
    if (annotatedColumns) {
      annotatedColumns.insertAnnotatedColumns = annotatedColumns.updateAnnotatedColumns
    }

    if (this._obj.INSERT.columns) {
      this._removeAlreadyExistingInsertAnnotatedColumnsFromMap(annotatedColumns)
      this._columns(annotatedColumns)
    }

    if (this._obj.INSERT.values || this._obj.INSERT.rows) {
      if (annotatedColumns && !this._obj.INSERT.columns) {
        // if columns not provided get indexes from csn
        this._getAnnotatedColumnIndexes(annotatedColumns)
      }

      this._values(annotatedColumns)
    } else if (this._obj.INSERT.entries && this._obj.INSERT.entries.length !== 0) {
      this._entries(annotatedColumns)
    }

    const insertSql = this._outputObj.sql.join(' ')

    const csnKeys = this._obj._target ? this._obj._target.keys : this._csn.definitions[this._obj.INSERT.into].keys
    const keys = Object.keys(csnKeys).filter(k => !csnKeys[k].isAssociation)
    const conflict = ` ON CONFLICT(${keys}) DO UPDATE SET `
    const updates = []
    const columns = this._obj.INSERT.columns || Object.keys(this._obj.INSERT.entries[0])
    columns.forEach(col => {
      const col_ = col.replace(/\./g, '_')
      if (!keys.includes(col_)) updates.push(`${col_}=excluded.${col_}`)
    })

    if (updates.length) {
      this._outputObj.sql = insertSql + conflict + updates.join(', ')
    }

    return this._outputObj
  }
}

module.exports = CustomUpsertBuilder
