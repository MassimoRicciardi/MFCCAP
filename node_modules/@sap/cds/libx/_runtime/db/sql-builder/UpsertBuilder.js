const InsertBuilder = require('./InsertBuilder')
const getAnnotatedColumns = require('./annotations')

class UpsertBuilder extends InsertBuilder {
  constructor(obj, options, csn) {
    super(obj, options, csn)
  }

  // REVISIT: We need to copy over the implementation for annotation handling
  build() {
    this._outputObj = {
      sql: ['UPSERT'],
      values: []
    }
    this._obj = { INSERT: this._obj.UPSERT, _target: this._obj._target }

    const entityName = this._into()

    this._columnIndexesToDelete = []
    const annotatedColumns = getAnnotatedColumns(entityName, this._csn)
    // hack: treat update annotations as insert because of sql builder impl
    if (annotatedColumns) {
      annotatedColumns.insertAnnotatedColumns = annotatedColumns.updateAnnotatedColumns
    }

    if (this._obj.INSERT.columns) {
      this._removeAlreadyExistingInsertAnnotatedColumnsFromMap(annotatedColumns)
      this._columns(annotatedColumns)
    }

    if (this._obj.INSERT.values || this._obj.INSERT.rows) {
      if (annotatedColumns && !this._obj.INSERT.columns) {
        // if columns not provided get indexes from csn
        this._getAnnotatedColumnIndexes(annotatedColumns)
      }

      this._values(annotatedColumns)
    } else if (this._obj.INSERT.entries && this._obj.INSERT.entries.length !== 0) {
      this._entries(annotatedColumns)
    }

    this._outputObj.sql = this._outputObj.sql.join(' ') + ' WITH PRIMARY KEY'
    return this._outputObj
  }
}

module.exports = UpsertBuilder
